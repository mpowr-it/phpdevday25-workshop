apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: alpha-pg-app-es
  namespace: int-app-alpha
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: aws-sm
  target:
    name: alpha-pg-app
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      engineVersion: v2
      mergePolicy: Merge
      metadata:
        labels:
          cnpg.io/reload: "true"
  dataFrom:
    - extract:
        key: arn:aws:secretsmanager:eu-central-1:847388866751:secret:workshop/pgsql/alpha-0cCaXH

---
#
# *** FIELD-NOTES ***
#
# creationPolicy: Owner
#   ESO creates the target Secret (e.g., alpha-pg-app) if it does not exist.
#   This is perfect for first runs in fresh clusters or workshop environments.
#   Afterward, ESO stays the "Owner" and keeps the mapped keys in sync.
#
# deletionPolicy: Retain
#   Even if someone deletes your ExternalSecret, the Kubernetes Secret remains.
#   Useful for workshops; it prevents accidental loss of credentials.
#
# template.mergePolicy: Merge
#   If you later add more labels, annotations, or keys in the template,
#   they will be merged instead of being hard-overwritten.
#
# dataFrom.extract
#   Pulls JSON properties 1:1 from the external provider (e.g., AWS, Vault, 1Password).
#   CNPG can add its own keys in parallel (such as pgpass, jdbc-uri, etc.);
#   ESO will not touch them unless they are explicitly provided by the external Secret.
#
# cnpg.io/reload: "true"
#   Important: CNPG watches for password changes on the Secret and applies them
#   directly inside PostgreSQL. No custom SQL or Jobs are required.
#
