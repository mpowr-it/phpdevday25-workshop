lua_package_path '/usr/local/openresty/site/lualib/?.lua;/usr/local/openresty/lualib/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;;';
lua_package_cpath '/usr/local/openresty/site/lualib/?.so;/usr/local/openresty/lualib/?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;;';

# For outbound TLS validation (only if you set ssl_verify=true in pgmoon)
lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
lua_ssl_verify_depth 3;

server {
    listen 8080;
    listen [::]:8080;
    server_name localhost;

    location = /cover.css {
        access_log off;
        alias /usr/share/nginx/html/cover.css;
    }

    location = /favicon.ico {
        access_log off;
        alias /usr/share/nginx/html/favicon.ico;
    }

    location ^~ /dist/ {
        access_log off;
        alias /usr/share/nginx/html/dist/;
    }

    location ^~ /assets/ {
        access_log off;
        alias /usr/share/nginx/html/assets/;
    }

    location ~ /\. {
        access_log        off;
        log_not_found     off;
        deny              all;
    }

    location = /db-check {
        access_log off;

        content_by_lua_block {
            local function redact(s)
                if not s then return nil end
                if #s <= 4 then return "***" end
                return s:sub(1,2) .. string.rep("*", #s-4) .. s:sub(-2)
            end

            local env = {
                host      = os.getenv("host")      or os.getenv("PGHOST")      or os.getenv("POSTGRES_HOST"),
                port      = os.getenv("port")      or os.getenv("PGPORT")      or os.getenv("POSTGRES_PORT") or "5432",
                database  = os.getenv("database")  or os.getenv("PGDATABASE")  or os.getenv("POSTGRES_DB"),
                user      = os.getenv("username")  or os.getenv("PGUSER")      or os.getenv("POSTGRES_USER"),
                password  = os.getenv("password")  or os.getenv("PGPASSWORD")  or os.getenv("POSTGRES_PASSWORD"),
                auth_type = os.getenv("auth_type") or "md5",
                ssl       = true,
                ssl_verify= false,
            }

            -- log relevant data
            ngx.log(ngx.ERR, string.format(
                "[PG-CONNECT] host=%s port=%s db=%s user=%s auth=%s ssl=%s verify=%s",
                tostring(env.host or "nil"),
                tostring(env.port or "nil"),
                tostring(env.database or "nil"),
                tostring(env.user or "nil"),
                tostring(env.auth_type),
                tostring(env.ssl),
                tostring(env.ssl_verify)
            ))
            ngx.log(ngx.ERR, "[PG-CONNECT] password=" .. tostring(redact(env.password)))

            -- validate
            local missing = {}
            for k,v in pairs({host=env.host, database=env.database, user=env.user, password=env.password}) do
                if not v or v == "" then table.insert(missing, k) end
            end
            if #missing > 0 then
                ngx.status = 500
                ngx.say("Missing PG env vars: " .. table.concat(missing, ", "))
                return
            end

            local pgmoon = require("pgmoon")
            local pg = pgmoon.new(env)

            local ok, err = pg:connect()
            if not ok then
                ngx.status = 500
                ngx.say("DB connection failed: ", err)
                return
            end

            ngx.say("OK")
        }
    }

    location = /debug-env {
        access_log off;
        default_type text/plain;

        content_by_lua_block {
            local keys = {
                "host","port","database","username","password","auth_type",
                "PGHOST","PGPORT","PGDATABASE","PGUSER","PGPASSWORD",
                "POSTGRES_HOST","POSTGRES_PORT","POSTGRES_DB","POSTGRES_USER","POSTGRES_PASSWORD",
                "C_MESSAGE","C_APP_VERSION"
            }
            local function redact(k,v)
                if not v then return "nil" end
                if k:lower():find("pass") then
                    if #v <= 4 then return "***" end
                    return v:sub(1,2) .. string.rep("*", #v-4) .. v:sub(-2)
                end
                return v
            end
            for _,k in ipairs(keys) do
                ngx.say(k, "=", redact(k, os.getenv(k)))
            end
        }
    }

    location / {

        index index.html;
        content_by_lua_block {

            -- Read helper function for local file content
            local function read_file(path)
                local f = io.open(path, "r")
                if not f then return "" end
                local content = f:read("*all")
                f:close()
                return string.gsub(content or "", "\n", "")
            end

            -- Read system metadata from pre-rendered files
            local sys_cpod_ip = read_file("/.docker/sys_cpod_ip.log")
            local sys_cpod_hostname = read_file("/.docker/sys_cpod_hostname.log")
            local sys_k8s_master_ip = read_file("/.docker/sys_k8s_master_ip.log")

            -- Load pgmoon PostgreSQL client
            local pgmoon = require("pgmoon")
            local pg = pgmoon.new({
                host      = os.getenv("host")      or os.getenv("PGHOST")      or os.getenv("POSTGRES_HOST"),
                port      = os.getenv("port")      or os.getenv("PGPORT")      or os.getenv("POSTGRES_PORT") or "5432",
                database  = os.getenv("database")  or os.getenv("PGDATABASE")  or os.getenv("POSTGRES_DB"),
                user      = os.getenv("username")  or os.getenv("PGUSER")      or os.getenv("POSTGRES_USER"),
                password  = os.getenv("password")  or os.getenv("PGPASSWORD")  or os.getenv("POSTGRES_PASSWORD"),
                auth_type = os.getenv("auth_type") or "md5",
                ssl       = true,
                ssl_verify= false,
            })

            -- Try to connect and query database-version
            local db_version = "N/A"
            local ok, err = pg:connect()
            if ok then
                local res = pg:query("SELECT version();")
                if res and res[1] and res[1].version then
                    db_version = string.match(res[1].version, "^(.-)%s*%(")
                end
            else
                db_version = "Connection failed: " .. (err or "unspecified error")
            end

            -- Prepare HTML template for rendering
            local template = require "resty.template"
            template.root = "/usr/share/nginx/html/"
            template.caching(false)
            local view = template.new "index.html"

            -- Inject dynamic values into template
            view.C_IP_ADDRESS = sys_cpod_ip
            view.C_IP_ADDRESS_K8S_MASTER = sys_k8s_master_ip
            view.C_HOSTNAME = sys_cpod_hostname

            view.C_SERVICE_NAME_LONG = os.getenv("C_SERVICE_NAME_LONG")
            view.C_APP_VERSION = os.getenv("C_APP_VERSION")
            view.C_IMG_META_TAG = os.getenv("DOCKER_IMAGE_TAG")
            view.C_IMG_META_OS = os.getenv("DOCKER_IMAGE_OS")
            view.C_IMG_META_NGINX_VERSION = os.getenv("VER_NGINX")
            view.C_IMG_META_NGINX_LUA_VERSION = os.getenv("VER_LUA")
            view.C_IMG_BUILD_DATE = os.getenv("BUILD_DATE")
            view.C_MESSAGE = os.getenv("C_MESSAGE")
            view.C_DB_VERSION = db_version
            view.C_APP_COMPANY = os.getenv("C_APP_COMPANY")

            -- Send rendered HTML to the client
            ngx.header.content_type = "text/html; charset=UTF-8"
            view:render()
        }
    }

    location /error-500 {
        return 500;
    }

    location ~ ^(/error/[^/]+) {
        if ($request_uri ~* "([^/]*$)" ) {
            set $errorCode $1;
            add_header Content-Type text/plain;
            content_by_lua_block {
                local statusCodeNum = tonumber(ngx.var.errorCode)
                ngx.status = statusCodeNum

                return ngx.exit(statusCodeNum)
            }
        }
    }

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /error.html;

    location = /error.html {
        ssi on;
        internal;
        auth_basic off;
        root /var/www/default;
        index error.html;

        content_by_lua_block {
            local template = require "resty.template"
            template.root = "/usr/share/nginx/html/"
            ngx.header.content_type = "text/html; charset=UTF-8"

            local view = template.new "error.html"
            view:render()
        }
    }
}